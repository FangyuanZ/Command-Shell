Before running each command, you can see that my Shell print a prompt:
myShell:/home/fz49/ece551/mp_miniproject $

This is correct because the prompt already contians the current working directory before the $.

Run /bin/ls

	You will see that it prints:
    	"a list of files and directories"
    	Program existed with tatus 0
    	This is correct because you typed the full path of the ls command and myShell executed it correctly.

Run /bin/pwd

	You will see that it prints: 
	/home/fz49/ece551/mp_miniproject
	Program existed with tatus 0
	This is correct you typed the full path of the pwd command and myShell executed it correctly

Run exit 

	You will see that it exits myShell and return back to fz49@ece551:~/ece551/mp_miniproject,
	which is correct because it terminates every process in myShell and exit to the previous work directory.

Run EOF (Ctr+D)

	You will see that it did the same function as (2).  

Run env

	You will see that it prints:
	a list of paths which include the ECE551PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr
	/games:/usr/local/games, which is correct because myShell searches the ECE551PATH environment variable for co
	mmands.

Run ls

	You will see that it prints:
    	"a list of files and directories"
    	Program existed with tatus 0
    	This is correct because myShell also accepts the relative path of the command typed.

Run ./test (test is a cpp file which prints "Hello, World!")

	You will see that it prints:
	Hello World!
	Program exited with status 0
	This is correct because the path name contains a "/" and myShell would only look in the specified directory and execute the command.

Run .

	You will see that it prints:
	Command . not found
	This is correct bacause . is a name of directory, which can not be executed.

Run ./787878

	You will see that it prints:
	Command not found
	This is correct because 787878 is a non-existing directory, so it won't be executed.
	
(args is a program which prints the a list of arguments followed by ./args)

Run ./args a b 123

	You will see that it prints:
	a
	b
	123
	Program exited with status 0
	This is correct because in myShell commands could take arguments separated by white space.

Run ./args a       b                123

	You will see that it prints:
	a
	b
	123
	Program exited with status 0
	(Same as (9))
	This is correct because myShell would also accept arbitrary amount of whitespace in between arguments

Run ./args 123\ 567      567\ \ 000

	You will see that it prints:
	123 567
	567  000
	Program exited with status 0
	This is correct because in myShell, any white space which is escaped with a \ should be literally included in
	the argument and not used as a separator.

Run echo hello,\         myShell
	
	You will see that it prints:
	hello,  myShell
	Program exited with status 0
	This is correct because echo takes two arguments: "hello " and "myShell", and they are seperated by a space.

Run echo hello,\ 8\ 8\ 8\ myShell

	You will see that it prints:
	hello, 8 8 8 myShell
	Program exited with status 0
	This is correct because echo only takes one argument and all the "\ " has been turned into a real space.


Run 18273jkhajk(a non-exist command)

	You will see that it prints:
	Command 18273jkhajk not found
	This is correct because myShell could not execute this command in PATH, so it prints an error message.

Run cd

	You will see that it goes to the directory myShell:/home $ 
	This is correct because this is how it works in UNIX terminal 

Run cd ..

	You will see that it goes back to the directory myShell:/home/fz49/ece551 $ 
	This is correct because .. is the previous directory.

Run cd temp (temp is a directory made by myself)
   
   	You will see that it prints the content of temp, then it can execute command under this directory.

Run set a 123
    echo $a

	You will see that it prints:
	123
	Program exited with status 0 
	This is correct because a has been set as a variable, $a would be replaced as the value of a.

Run set a 123
    set b 456
    echo $a$b

	You will see that it prints:
	123456
	Program exited with status 0 
	This is correct because a and b has already been set as variables, so echo $a$b has been turned into the value
	of $a and $b, which is 123456.

Run set a 123
    echo $a-000

	You will see that it prints:
	123-000
	Program exited with status 0 
	This is correct because myShell could detect variable a and replace $a with a's value.

Run set a ls\ -l
    $a

	You will see that it prints:
	"a list of files and directories"
    	Program existed with tatus 0
    	This is correct becasue the command has been interpreted to "ls -l" ("\ " is regarded as " ").

Run set a
	
	You will see that it prints:
	variable not found
	This is correct because the command set should take two arguments, the first is the name of the variable and
	the second is the value of that variable. If you typed only one argument, myShell would print an error.

Run set *** 123

	You will see that it prints:
	variable out of range
	This is correct because a variable name must be a combination of letters (case sensitive), underscores, and n
	umbers, so myShell would print an error.

Run set a a
    set a $a $a
    echo $a

	You will see that it prints:
	a a
	Program exited with status 0
	This is correct because the value of variable a is changed to "$a $a", where $a is equal to a.

Run set a 123
    set b $a
    echo $b

	You will see that it prints:
	123
	Program exited with status 0
	This is correct because the value of a variable can be the value of another variable.

Run set a 123
    inc a
    echo $a

	You will see that it prints:
	124
	Program exited with status 0
	This is correct because the command "inc" interprets the value of var as a number (base10), and increments it.

Run inc x
    echo $x

	You will see that it prints:
	1
	Program exited with status 0
	This is correct because if the argument after inc hasn't been set, it will be set as number 1.

Run inc

	You will see that it prints:
	only one key accepted
	This is correct because the inc command only accept one argument, other cases would all cause error.

Run inc x y z

	You will see that it prints:
	only one key accepted
	This is correct because the inc command only accept one argument, other cases would all cause error.

Run set a 012
    inc a
    echo $a

	You will see that it prints:
	1
	Program exited with status 0
	This is correct because 012 is not a number in base10, so after the command "inc", it would be automatically
	changed to number 1.

Run set a 123
    export a
    env

	You will see that it prints:
	A list of path including "a=123"
	This is correct because export could put the current value of var into the environment for
	other programs.

Run set PATH /bin
    export PATH
    env

	You will see that PATH has been modified to â€œPATH=/bin"
	This is correct because if the user changes PATH, it should affect where myShell searches for programs.

Run export
	
	You will see that it prints:
	variable not found
	This is correct because the command export could only take one argument, any other cases would print error.

Run export a b c d

	You will see that it prints:
	key not found
	This is correct because the command export could only take one argument, any other cases would print error.

Run set a 123
    set b 456
    echo $ab

	You will see that it prints:
	123b
	Program exited with status 0
	This is correct because in my algorithm, the operation "$" depends on the closest variable that has already b
	een set. Here a has been set, so $ab would be 123b.

Run set a b
    echo 888\ $a\ 000

	You will see that it prints:
	888 b 000
	Program exited with status 0
	This is correct because $a is changed to b and "\ " is regarded as a regular space.

Run set a 123
    echo $a$

	You will see that it prints:
	123$
	Program exited with status 0
	This is correct because the first "$" is to change the value of a since we have set variable a to 123, the se
	cond "$" is a regular one since there isn't any variable following it.





